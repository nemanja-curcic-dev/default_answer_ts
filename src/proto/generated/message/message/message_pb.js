/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var advert_advert_advert_pb = require('../../advert/advert/advert_pb.js');
goog.object.extend(proto, advert_advert_advert_pb);
goog.exportSymbol('proto.coozzy.message.message.ChannelType', null, global);
goog.exportSymbol('proto.coozzy.message.message.ChatRoom', null, global);
goog.exportSymbol('proto.coozzy.message.message.ChatRoomCreated', null, global);
goog.exportSymbol('proto.coozzy.message.message.ChatRooms', null, global);
goog.exportSymbol('proto.coozzy.message.message.Context', null, global);
goog.exportSymbol('proto.coozzy.message.message.CreateRoomRequest', null, global);
goog.exportSymbol('proto.coozzy.message.message.GetDashboardStatisticsRequest', null, global);
goog.exportSymbol('proto.coozzy.message.message.GetDashboardStatisticsResponse', null, global);
goog.exportSymbol('proto.coozzy.message.message.GetRoomRequest', null, global);
goog.exportSymbol('proto.coozzy.message.message.GetUnansweredRoomsRequest', null, global);
goog.exportSymbol('proto.coozzy.message.message.Member', null, global);
goog.exportSymbol('proto.coozzy.message.message.Message', null, global);
goog.exportSymbol('proto.coozzy.message.message.MessageSent', null, global);
goog.exportSymbol('proto.coozzy.message.message.MessageType', null, global);
goog.exportSymbol('proto.coozzy.message.message.SendMessageRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.ChatRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coozzy.message.message.ChatRoom.repeatedFields_, null);
};
goog.inherits(proto.coozzy.message.message.ChatRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.ChatRoom.displayName = 'proto.coozzy.message.message.ChatRoom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coozzy.message.message.ChatRoom.repeatedFields_ = [6,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.ChatRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.ChatRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.ChatRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.ChatRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pubnubchannel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    advertid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    context: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contextid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.coozzy.message.message.Member.toObject, includeInstance),
    lastmessage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lastmessagetimestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    appointmentidsList: jspb.Message.getRepeatedField(msg, 9),
    mediaidsList: jspb.Message.getRepeatedField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.ChatRoom}
 */
proto.coozzy.message.message.ChatRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.ChatRoom;
  return proto.coozzy.message.message.ChatRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.ChatRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.ChatRoom}
 */
proto.coozzy.message.message.ChatRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubnubchannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAdvertid(value);
      break;
    case 4:
      var value = /** @type {!proto.coozzy.message.message.Context} */ (reader.readEnum());
      msg.setContext(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 6:
      var value = new proto.coozzy.message.message.Member;
      reader.readMessage(value,proto.coozzy.message.message.Member.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastmessage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastmessagetimestamp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addAppointmentids(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addMediaids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.ChatRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.ChatRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.ChatRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.ChatRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPubnubchannel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdvertid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.coozzy.message.message.Member.serializeBinaryToWriter
    );
  }
  f = message.getLastmessage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLastmessagetimestamp();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getAppointmentidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getMediaidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.coozzy.message.message.ChatRoom.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coozzy.message.message.ChatRoom.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pubNubChannel = 2;
 * @return {string}
 */
proto.coozzy.message.message.ChatRoom.prototype.getPubnubchannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coozzy.message.message.ChatRoom.prototype.setPubnubchannel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 advertId = 3;
 * @return {number}
 */
proto.coozzy.message.message.ChatRoom.prototype.getAdvertid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coozzy.message.message.ChatRoom.prototype.setAdvertid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Context context = 4;
 * @return {!proto.coozzy.message.message.Context}
 */
proto.coozzy.message.message.ChatRoom.prototype.getContext = function() {
  return /** @type {!proto.coozzy.message.message.Context} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.coozzy.message.message.Context} value */
proto.coozzy.message.message.ChatRoom.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string contextId = 5;
 * @return {string}
 */
proto.coozzy.message.message.ChatRoom.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.coozzy.message.message.ChatRoom.prototype.setContextid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Member members = 6;
 * @return {!Array<!proto.coozzy.message.message.Member>}
 */
proto.coozzy.message.message.ChatRoom.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.coozzy.message.message.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coozzy.message.message.Member, 6));
};


/** @param {!Array<!proto.coozzy.message.message.Member>} value */
proto.coozzy.message.message.ChatRoom.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.coozzy.message.message.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coozzy.message.message.Member}
 */
proto.coozzy.message.message.ChatRoom.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.coozzy.message.message.Member, opt_index);
};


proto.coozzy.message.message.ChatRoom.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional string lastMessage = 7;
 * @return {string}
 */
proto.coozzy.message.message.ChatRoom.prototype.getLastmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.coozzy.message.message.ChatRoom.prototype.setLastmessage = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 lastMessageTimestamp = 8;
 * @return {number}
 */
proto.coozzy.message.message.ChatRoom.prototype.getLastmessagetimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.coozzy.message.message.ChatRoom.prototype.setLastmessagetimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated string appointmentIds = 9;
 * @return {!Array<string>}
 */
proto.coozzy.message.message.ChatRoom.prototype.getAppointmentidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.coozzy.message.message.ChatRoom.prototype.setAppointmentidsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coozzy.message.message.ChatRoom.prototype.addAppointmentids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.coozzy.message.message.ChatRoom.prototype.clearAppointmentidsList = function() {
  this.setAppointmentidsList([]);
};


/**
 * repeated string mediaIds = 10;
 * @return {!Array<string>}
 */
proto.coozzy.message.message.ChatRoom.prototype.getMediaidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<string>} value */
proto.coozzy.message.message.ChatRoom.prototype.setMediaidsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coozzy.message.message.ChatRoom.prototype.addMediaids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.coozzy.message.message.ChatRoom.prototype.clearMediaidsList = function() {
  this.setMediaidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.ChatRooms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coozzy.message.message.ChatRooms.repeatedFields_, null);
};
goog.inherits(proto.coozzy.message.message.ChatRooms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.ChatRooms.displayName = 'proto.coozzy.message.message.ChatRooms';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coozzy.message.message.ChatRooms.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.ChatRooms.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.ChatRooms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.ChatRooms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.ChatRooms.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.coozzy.message.message.ChatRoom.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.ChatRooms}
 */
proto.coozzy.message.message.ChatRooms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.ChatRooms;
  return proto.coozzy.message.message.ChatRooms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.ChatRooms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.ChatRooms}
 */
proto.coozzy.message.message.ChatRooms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coozzy.message.message.ChatRoom;
      reader.readMessage(value,proto.coozzy.message.message.ChatRoom.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.ChatRooms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.ChatRooms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.ChatRooms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.ChatRooms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.coozzy.message.message.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChatRoom rooms = 1;
 * @return {!Array<!proto.coozzy.message.message.ChatRoom>}
 */
proto.coozzy.message.message.ChatRooms.prototype.getRoomsList = function() {
  return /** @type{!Array<!proto.coozzy.message.message.ChatRoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coozzy.message.message.ChatRoom, 1));
};


/** @param {!Array<!proto.coozzy.message.message.ChatRoom>} value */
proto.coozzy.message.message.ChatRooms.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.coozzy.message.message.ChatRoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coozzy.message.message.ChatRoom}
 */
proto.coozzy.message.message.ChatRooms.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.coozzy.message.message.ChatRoom, opt_index);
};


proto.coozzy.message.message.ChatRooms.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coozzy.message.message.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.Member.displayName = 'proto.coozzy.message.message.Member';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userreference: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    channeltype: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.Member}
 */
proto.coozzy.message.message.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.Member;
  return proto.coozzy.message.message.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.Member}
 */
proto.coozzy.message.message.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserreference(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {!proto.coozzy.message.message.ChannelType} */ (reader.readEnum());
      msg.setChanneltype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserreference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChanneltype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.coozzy.message.message.Member.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coozzy.message.message.Member.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userReference = 2;
 * @return {string}
 */
proto.coozzy.message.message.Member.prototype.getUserreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coozzy.message.message.Member.prototype.setUserreference = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 accountId = 3;
 * @return {number}
 */
proto.coozzy.message.message.Member.prototype.getAccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coozzy.message.message.Member.prototype.setAccountid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.coozzy.message.message.Member.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.coozzy.message.message.Member.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional ChannelType channelType = 5;
 * @return {!proto.coozzy.message.message.ChannelType}
 */
proto.coozzy.message.message.Member.prototype.getChanneltype = function() {
  return /** @type {!proto.coozzy.message.message.ChannelType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.coozzy.message.message.ChannelType} value */
proto.coozzy.message.message.Member.prototype.setChanneltype = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coozzy.message.message.Message.repeatedFields_, null);
};
goog.inherits(proto.coozzy.message.message.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.Message.displayName = 'proto.coozzy.message.message.Message';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coozzy.message.message.Message.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authorid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sent: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mediaidsList: jspb.Message.getRepeatedField(msg, 5),
    appointmentid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.Message}
 */
proto.coozzy.message.message.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.Message;
  return proto.coozzy.message.message.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.Message}
 */
proto.coozzy.message.message.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addMediaids(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppointmentid(value);
      break;
    case 7:
      var value = /** @type {!proto.coozzy.message.message.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthorid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSent();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMediaidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getAppointmentid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.coozzy.message.message.Message.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coozzy.message.message.Message.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string authorId = 2;
 * @return {string}
 */
proto.coozzy.message.message.Message.prototype.getAuthorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coozzy.message.message.Message.prototype.setAuthorid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 sent = 3;
 * @return {number}
 */
proto.coozzy.message.message.Message.prototype.getSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coozzy.message.message.Message.prototype.setSent = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.coozzy.message.message.Message.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.coozzy.message.message.Message.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string mediaIds = 5;
 * @return {!Array<string>}
 */
proto.coozzy.message.message.Message.prototype.getMediaidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.coozzy.message.message.Message.prototype.setMediaidsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coozzy.message.message.Message.prototype.addMediaids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.coozzy.message.message.Message.prototype.clearMediaidsList = function() {
  this.setMediaidsList([]);
};


/**
 * optional string appointmentId = 6;
 * @return {string}
 */
proto.coozzy.message.message.Message.prototype.getAppointmentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.coozzy.message.message.Message.prototype.setAppointmentid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional MessageType type = 7;
 * @return {!proto.coozzy.message.message.MessageType}
 */
proto.coozzy.message.message.Message.prototype.getType = function() {
  return /** @type {!proto.coozzy.message.message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.coozzy.message.message.MessageType} value */
proto.coozzy.message.message.Message.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.ChatRoomCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coozzy.message.message.ChatRoomCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.ChatRoomCreated.displayName = 'proto.coozzy.message.message.ChatRoomCreated';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.ChatRoomCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.ChatRoomCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.ChatRoomCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.ChatRoomCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.coozzy.message.message.ChatRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.ChatRoomCreated}
 */
proto.coozzy.message.message.ChatRoomCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.ChatRoomCreated;
  return proto.coozzy.message.message.ChatRoomCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.ChatRoomCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.ChatRoomCreated}
 */
proto.coozzy.message.message.ChatRoomCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coozzy.message.message.ChatRoom;
      reader.readMessage(value,proto.coozzy.message.message.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.ChatRoomCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.ChatRoomCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.ChatRoomCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.ChatRoomCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coozzy.message.message.ChatRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.coozzy.message.message.ChatRoom}
 */
proto.coozzy.message.message.ChatRoomCreated.prototype.getRoom = function() {
  return /** @type{?proto.coozzy.message.message.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.coozzy.message.message.ChatRoom, 1));
};


/** @param {?proto.coozzy.message.message.ChatRoom|undefined} value */
proto.coozzy.message.message.ChatRoomCreated.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coozzy.message.message.ChatRoomCreated.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coozzy.message.message.ChatRoomCreated.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.MessageSent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coozzy.message.message.MessageSent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.MessageSent.displayName = 'proto.coozzy.message.message.MessageSent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.MessageSent.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.MessageSent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.MessageSent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.MessageSent.toObject = function(includeInstance, msg) {
  var f, obj = {
    room: (f = msg.getRoom()) && proto.coozzy.message.message.ChatRoom.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.coozzy.message.message.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.MessageSent}
 */
proto.coozzy.message.message.MessageSent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.MessageSent;
  return proto.coozzy.message.message.MessageSent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.MessageSent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.MessageSent}
 */
proto.coozzy.message.message.MessageSent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.coozzy.message.message.ChatRoom;
      reader.readMessage(value,proto.coozzy.message.message.ChatRoom.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    case 2:
      var value = new proto.coozzy.message.message.Message;
      reader.readMessage(value,proto.coozzy.message.message.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.MessageSent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.MessageSent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.MessageSent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.MessageSent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.coozzy.message.message.ChatRoom.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.coozzy.message.message.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatRoom room = 1;
 * @return {?proto.coozzy.message.message.ChatRoom}
 */
proto.coozzy.message.message.MessageSent.prototype.getRoom = function() {
  return /** @type{?proto.coozzy.message.message.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.coozzy.message.message.ChatRoom, 1));
};


/** @param {?proto.coozzy.message.message.ChatRoom|undefined} value */
proto.coozzy.message.message.MessageSent.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coozzy.message.message.MessageSent.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coozzy.message.message.MessageSent.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Message message = 2;
 * @return {?proto.coozzy.message.message.Message}
 */
proto.coozzy.message.message.MessageSent.prototype.getMessage = function() {
  return /** @type{?proto.coozzy.message.message.Message} */ (
    jspb.Message.getWrapperField(this, proto.coozzy.message.message.Message, 2));
};


/** @param {?proto.coozzy.message.message.Message|undefined} value */
proto.coozzy.message.message.MessageSent.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coozzy.message.message.MessageSent.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.coozzy.message.message.MessageSent.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.CreateRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coozzy.message.message.CreateRoomRequest.repeatedFields_, null);
};
goog.inherits(proto.coozzy.message.message.CreateRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.CreateRoomRequest.displayName = 'proto.coozzy.message.message.CreateRoomRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coozzy.message.message.CreateRoomRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.CreateRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.CreateRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.CreateRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.CreateRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contextid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.coozzy.message.message.Member.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.CreateRoomRequest}
 */
proto.coozzy.message.message.CreateRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.CreateRoomRequest;
  return proto.coozzy.message.message.CreateRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.CreateRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.CreateRoomRequest}
 */
proto.coozzy.message.message.CreateRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.coozzy.message.message.Context} */ (reader.readEnum());
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    case 3:
      var value = new proto.coozzy.message.message.Member;
      reader.readMessage(value,proto.coozzy.message.message.Member.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.CreateRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.CreateRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.CreateRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.CreateRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.coozzy.message.message.Member.serializeBinaryToWriter
    );
  }
};


/**
 * optional Context context = 1;
 * @return {!proto.coozzy.message.message.Context}
 */
proto.coozzy.message.message.CreateRoomRequest.prototype.getContext = function() {
  return /** @type {!proto.coozzy.message.message.Context} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.coozzy.message.message.Context} value */
proto.coozzy.message.message.CreateRoomRequest.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string contextId = 2;
 * @return {string}
 */
proto.coozzy.message.message.CreateRoomRequest.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coozzy.message.message.CreateRoomRequest.prototype.setContextid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Member members = 3;
 * @return {!Array<!proto.coozzy.message.message.Member>}
 */
proto.coozzy.message.message.CreateRoomRequest.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.coozzy.message.message.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coozzy.message.message.Member, 3));
};


/** @param {!Array<!proto.coozzy.message.message.Member>} value */
proto.coozzy.message.message.CreateRoomRequest.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.coozzy.message.message.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coozzy.message.message.Member}
 */
proto.coozzy.message.message.CreateRoomRequest.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.coozzy.message.message.Member, opt_index);
};


proto.coozzy.message.message.CreateRoomRequest.prototype.clearMembersList = function() {
  this.setMembersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.GetRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coozzy.message.message.GetRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.GetRoomRequest.displayName = 'proto.coozzy.message.message.GetRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.GetRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.GetRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.GetRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contextid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.GetRoomRequest}
 */
proto.coozzy.message.message.GetRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.GetRoomRequest;
  return proto.coozzy.message.message.GetRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.GetRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.GetRoomRequest}
 */
proto.coozzy.message.message.GetRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.coozzy.message.message.Context} */ (reader.readEnum());
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.GetRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.GetRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.GetRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContextid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Context context = 1;
 * @return {!proto.coozzy.message.message.Context}
 */
proto.coozzy.message.message.GetRoomRequest.prototype.getContext = function() {
  return /** @type {!proto.coozzy.message.message.Context} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.coozzy.message.message.Context} value */
proto.coozzy.message.message.GetRoomRequest.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string contextId = 2;
 * @return {string}
 */
proto.coozzy.message.message.GetRoomRequest.prototype.getContextid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coozzy.message.message.GetRoomRequest.prototype.setContextid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coozzy.message.message.GetUnansweredRoomsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.GetUnansweredRoomsRequest.displayName = 'proto.coozzy.message.message.GetUnansweredRoomsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.GetUnansweredRoomsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.GetUnansweredRoomsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.GetUnansweredRoomsRequest}
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.GetUnansweredRoomsRequest;
  return proto.coozzy.message.message.GetUnansweredRoomsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.GetUnansweredRoomsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.GetUnansweredRoomsRequest}
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.coozzy.message.message.Context} */ (reader.readEnum());
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.GetUnansweredRoomsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.GetUnansweredRoomsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAccountid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional Context context = 1;
 * @return {!proto.coozzy.message.message.Context}
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.prototype.getContext = function() {
  return /** @type {!proto.coozzy.message.message.Context} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.coozzy.message.message.Context} value */
proto.coozzy.message.message.GetUnansweredRoomsRequest.prototype.setContext = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 accountId = 2;
 * @return {number}
 */
proto.coozzy.message.message.GetUnansweredRoomsRequest.prototype.getAccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coozzy.message.message.GetUnansweredRoomsRequest.prototype.setAccountid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.SendMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coozzy.message.message.SendMessageRequest.repeatedFields_, null);
};
goog.inherits(proto.coozzy.message.message.SendMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.SendMessageRequest.displayName = 'proto.coozzy.message.message.SendMessageRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coozzy.message.message.SendMessageRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.SendMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.SendMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.SendMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mediaidsList: jspb.Message.getRepeatedField(msg, 5),
    appointmentid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.SendMessageRequest}
 */
proto.coozzy.message.message.SendMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.SendMessageRequest;
  return proto.coozzy.message.message.SendMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.SendMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.SendMessageRequest}
 */
proto.coozzy.message.message.SendMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addMediaids(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppointmentid(value);
      break;
    case 7:
      var value = /** @type {!proto.coozzy.message.message.MessageType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.SendMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.SendMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.SendMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMediaidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getAppointmentid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional string roomId = 1;
 * @return {string}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coozzy.message.message.SendMessageRequest.prototype.setRoomid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coozzy.message.message.SendMessageRequest.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 accountId = 3;
 * @return {number}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.getAccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coozzy.message.message.SendMessageRequest.prototype.setAccountid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.coozzy.message.message.SendMessageRequest.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string mediaIds = 5;
 * @return {!Array<string>}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.getMediaidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.coozzy.message.message.SendMessageRequest.prototype.setMediaidsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.coozzy.message.message.SendMessageRequest.prototype.addMediaids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.coozzy.message.message.SendMessageRequest.prototype.clearMediaidsList = function() {
  this.setMediaidsList([]);
};


/**
 * optional string appointmentId = 6;
 * @return {string}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.getAppointmentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.coozzy.message.message.SendMessageRequest.prototype.setAppointmentid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional MessageType type = 7;
 * @return {!proto.coozzy.message.message.MessageType}
 */
proto.coozzy.message.message.SendMessageRequest.prototype.getType = function() {
  return /** @type {!proto.coozzy.message.message.MessageType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.coozzy.message.message.MessageType} value */
proto.coozzy.message.message.SendMessageRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coozzy.message.message.GetDashboardStatisticsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.GetDashboardStatisticsRequest.displayName = 'proto.coozzy.message.message.GetDashboardStatisticsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.GetDashboardStatisticsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.GetDashboardStatisticsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userreference: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.GetDashboardStatisticsRequest}
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.GetDashboardStatisticsRequest;
  return proto.coozzy.message.message.GetDashboardStatisticsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.GetDashboardStatisticsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.GetDashboardStatisticsRequest}
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserreference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.GetDashboardStatisticsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.GetDashboardStatisticsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserreference();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 accountId = 1;
 * @return {number}
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.prototype.getAccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.coozzy.message.message.GetDashboardStatisticsRequest.prototype.setAccountid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string userReference = 2;
 * @return {string}
 */
proto.coozzy.message.message.GetDashboardStatisticsRequest.prototype.getUserreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coozzy.message.message.GetDashboardStatisticsRequest.prototype.setUserreference = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coozzy.message.message.GetDashboardStatisticsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coozzy.message.message.GetDashboardStatisticsResponse.displayName = 'proto.coozzy.message.message.GetDashboardStatisticsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coozzy.message.message.GetDashboardStatisticsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coozzy.message.message.GetDashboardStatisticsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    overall: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unanswered: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.coozzy.message.message.GetDashboardStatisticsResponse}
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.coozzy.message.message.GetDashboardStatisticsResponse;
  return proto.coozzy.message.message.GetDashboardStatisticsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.coozzy.message.message.GetDashboardStatisticsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.coozzy.message.message.GetDashboardStatisticsResponse}
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOverall(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnanswered(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.coozzy.message.message.GetDashboardStatisticsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.coozzy.message.message.GetDashboardStatisticsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOverall();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUnanswered();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 overall = 1;
 * @return {number}
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.prototype.getOverall = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.coozzy.message.message.GetDashboardStatisticsResponse.prototype.setOverall = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 unanswered = 2;
 * @return {number}
 */
proto.coozzy.message.message.GetDashboardStatisticsResponse.prototype.getUnanswered = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.coozzy.message.message.GetDashboardStatisticsResponse.prototype.setUnanswered = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.coozzy.message.message.Context = {
  WITHOUT: 0,
  REQUEST: 1,
  TICKET: 2
};

/**
 * @enum {number}
 */
proto.coozzy.message.message.ChannelType = {
  COOZZY: 0,
  MAIL: 1
};

/**
 * @enum {number}
 */
proto.coozzy.message.message.MessageType = {
  NORMAL: 0,
  SEND_APPLICATION_FORM: 1,
  REQUEST_APPLICATION_FORM: 2,
  DEFAULT_ANSWER: 3
};

goog.object.extend(exports, proto.coozzy.message.message);
